<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gtmdmock.admin.model.mapper.ForwardMapper">
  <resultMap id="BaseResultMap" type="com.gtmdmock.admin.model.entity.Forward">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="request_id" jdbcType="INTEGER" property="requestId" />
    <result column="host" jdbcType="VARCHAR" property="host" />
    <result column="port" jdbcType="INTEGER" property="port" />
    <result column="is_secure" jdbcType="INTEGER" property="isSecure" />
    <result column="delay" jdbcType="INTEGER" property="delay" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, request_id, host, port, is_secure, delay
  </sql>
  <select id="selectByExample" parameterType="com.gtmdmock.admin.model.entity.ForwardExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from forward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from forward
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from forward
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.gtmdmock.admin.model.entity.ForwardExample">
    delete from forward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.gtmdmock.admin.model.entity.Forward">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into forward (id, request_id, host, 
      port, is_secure, delay
      )
    values (#{id,jdbcType=INTEGER}, #{requestId,jdbcType=INTEGER}, #{host,jdbcType=VARCHAR}, 
      #{port,jdbcType=INTEGER}, #{isSecure,jdbcType=INTEGER}, #{delay,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.gtmdmock.admin.model.entity.Forward">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into forward
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      <if test="requestId != null">
        request_id,
      </if>
      <if test="host != null">
        host,
      </if>
      <if test="port != null">
        port,
      </if>
      <if test="isSecure != null">
        is_secure,
      </if>
      <if test="delay != null">
        delay,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=INTEGER},
      <if test="requestId != null">
        #{requestId,jdbcType=INTEGER},
      </if>
      <if test="host != null">
        #{host,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        #{port,jdbcType=INTEGER},
      </if>
      <if test="isSecure != null">
        #{isSecure,jdbcType=INTEGER},
      </if>
      <if test="delay != null">
        #{delay,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.gtmdmock.admin.model.entity.ForwardExample" resultType="java.lang.Long">
    select count(*) from forward
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update forward
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.requestId != null">
        request_id = #{record.requestId,jdbcType=INTEGER},
      </if>
      <if test="record.host != null">
        host = #{record.host,jdbcType=VARCHAR},
      </if>
      <if test="record.port != null">
        port = #{record.port,jdbcType=INTEGER},
      </if>
      <if test="record.isSecure != null">
        is_secure = #{record.isSecure,jdbcType=INTEGER},
      </if>
      <if test="record.delay != null">
        delay = #{record.delay,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update forward
    set id = #{record.id,jdbcType=INTEGER},
      request_id = #{record.requestId,jdbcType=INTEGER},
      host = #{record.host,jdbcType=VARCHAR},
      port = #{record.port,jdbcType=INTEGER},
      is_secure = #{record.isSecure,jdbcType=INTEGER},
      delay = #{record.delay,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.gtmdmock.admin.model.entity.Forward">
    update forward
    <set>
      <if test="requestId != null">
        request_id = #{requestId,jdbcType=INTEGER},
      </if>
      <if test="host != null">
        host = #{host,jdbcType=VARCHAR},
      </if>
      <if test="port != null">
        port = #{port,jdbcType=INTEGER},
      </if>
      <if test="isSecure != null">
        is_secure = #{isSecure,jdbcType=INTEGER},
      </if>
      <if test="delay != null">
        delay = #{delay,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gtmdmock.admin.model.entity.Forward">
    update forward
    set request_id = #{requestId,jdbcType=INTEGER},
      host = #{host,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      is_secure = #{isSecure,jdbcType=INTEGER},
      delay = #{delay,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>